### COLORS ###
DEF_COLOR = \033[0;39m
GRAY = \033[0;90m
RED = \033[0;91m
GREEN = \033[0;92m
YELLOW = \033[0;93m
BLUE = \033[0;94m
MAGENTA = \033[0;95m
CYAN = \033[0;96m
WHITE = \033[0;97m

### VARIABLES ###
NAME = libftprintf.a
CC = gcc
AR = ar rcs
CFLAGS = -Wall -Wextra -Werror
INCLUDE = include/ft_printf.h
OBJF = .cache_exists	# needed to create obj/ directory

# Directories
SRC_DIR = src/
OBJ_DIR = obj/

# Files
SRC_FILES = ft_printf.c ft_printf_functions.c ft_printf_num.c
SRC =	$(addprefix $(SRC_DIR), $(SRC_FILES)) 
OBJ = 	$(addprefix $(OBJ_DIR), $(SRC_FILES:.c=.o))

### COMPILATION ###

$(OBJF):
	@mkdir -p $(OBJ_DIR)

# Creating object files (.o) from source files (.c) inside the OBJ_DIR directory.
# The option -o indicates the name of the outpout, the option -c indicates the source that is used.
$(OBJ_DIR)%.o : $(SRC_DIR)%.c $(INCLUDE) | $(OBJF)
	@echo "$(YELLOW)Compiling: $< $(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compiling all objets files (.o) to a file "NAME" :
$(NAME) : $(OBJ)
	@$(AR) $(NAME) $(OBJ)
	@echo "$(GREEN)ft_printf compiled!$(DEF_COLOR)"

### MEMO ###
# 	Special variables :
#		$@	Represents the target file that is being generated by the rule
#		$<	Represents the first dependency of the rule
#		$^	Represents all the dependencies of the rule, separated by spaces.
#		$?	Represents a list of dependencies that are newer than the target file.
#		$*	Represents the stem of the target filename (without the extension)

### RULES ##

all : $(NAME)

clean :
	@rm -rf $(OBJ_DIR)
	@rm -rf $(SRC:.c=.o) $(SRC_BONUS:.c=.o)
	@echo "$(BLUE)ft_printf object files cleaned!$(DEF_COLOR)"

fclean : clean
	@rm -rf $(NAME)
	@echo "$(CYAN)ft_printf executable files cleaned!$(DEF_COLOR)"

re :	fclean all
	@echo "$(GREEN)Cleaned and rebuilt everything for ft_printf!$(DEF_COLOR)"

.PHONY: all clean fclean re